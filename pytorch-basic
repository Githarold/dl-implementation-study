{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import torch\nimport numpy as np\n\ntorch.__version__","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-11-15T10:16:36.759066Z","iopub.execute_input":"2024-11-15T10:16:36.759506Z","iopub.status.idle":"2024-11-15T10:16:36.767222Z","shell.execute_reply.started":"2024-11-15T10:16:36.759466Z","shell.execute_reply":"2024-11-15T10:16:36.765870Z"},"trusted":true},"execution_count":187,"outputs":[{"execution_count":187,"output_type":"execute_result","data":{"text/plain":"'2.4.0+cpu'"},"metadata":{}}]},{"cell_type":"code","source":"data = [[1, 2], [3, 4]]\nx_data = torch.tensor(data)\nprint(x_data)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:36.796918Z","iopub.execute_input":"2024-11-15T10:16:36.797348Z","iopub.status.idle":"2024-11-15T10:16:36.804883Z","shell.execute_reply.started":"2024-11-15T10:16:36.797309Z","shell.execute_reply":"2024-11-15T10:16:36.803563Z"},"trusted":true},"execution_count":188,"outputs":[{"name":"stdout","text":"tensor([[1, 2],\n        [3, 4]])\n","output_type":"stream"}]},{"cell_type":"code","source":"x = torch.rand(4, 2)\nprint(x)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:36.817738Z","iopub.execute_input":"2024-11-15T10:16:36.818855Z","iopub.status.idle":"2024-11-15T10:16:36.826297Z","shell.execute_reply.started":"2024-11-15T10:16:36.818804Z","shell.execute_reply":"2024-11-15T10:16:36.824943Z"},"trusted":true},"execution_count":189,"outputs":[{"name":"stdout","text":"tensor([[0.5393, 0.2302],\n        [0.7441, 0.1491],\n        [0.8727, 0.8713],\n        [0.2706, 0.5784]])\n","output_type":"stream"}]},{"cell_type":"code","source":"x =  x.new_ones(2, 4, dtype=torch.double)\nprint(x)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:36.858757Z","iopub.execute_input":"2024-11-15T10:16:36.859215Z","iopub.status.idle":"2024-11-15T10:16:36.868165Z","shell.execute_reply.started":"2024-11-15T10:16:36.859165Z","shell.execute_reply":"2024-11-15T10:16:36.866622Z"},"trusted":true},"execution_count":190,"outputs":[{"name":"stdout","text":"tensor([[1., 1., 1., 1.],\n        [1., 1., 1., 1.]], dtype=torch.float64)\n","output_type":"stream"}]},{"cell_type":"code","source":"x = torch.randn_like(x, dtype=torch.float)\nprint(x)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:36.870426Z","iopub.execute_input":"2024-11-15T10:16:36.870968Z","iopub.status.idle":"2024-11-15T10:16:36.880199Z","shell.execute_reply.started":"2024-11-15T10:16:36.870923Z","shell.execute_reply":"2024-11-15T10:16:36.878781Z"},"trusted":true},"execution_count":191,"outputs":[{"name":"stdout","text":"tensor([[-1.9298, -0.1972, -0.2310, -0.4644],\n        [-0.6745, -0.8245,  1.0289,  2.9563]])\n","output_type":"stream"}]},{"cell_type":"code","source":"print(x.size())","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:36.893774Z","iopub.execute_input":"2024-11-15T10:16:36.894206Z","iopub.status.idle":"2024-11-15T10:16:36.900469Z","shell.execute_reply.started":"2024-11-15T10:16:36.894167Z","shell.execute_reply":"2024-11-15T10:16:36.899171Z"},"trusted":true},"execution_count":192,"outputs":[{"name":"stdout","text":"torch.Size([2, 4])\n","output_type":"stream"}]},{"cell_type":"code","source":"ft = torch.FloatTensor([1, 2, 3])\nprint(ft)\nprint(ft.dtype)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:36.915533Z","iopub.execute_input":"2024-11-15T10:16:36.915992Z","iopub.status.idle":"2024-11-15T10:16:36.924402Z","shell.execute_reply.started":"2024-11-15T10:16:36.915948Z","shell.execute_reply":"2024-11-15T10:16:36.923032Z"},"trusted":true},"execution_count":193,"outputs":[{"name":"stdout","text":"tensor([1., 2., 3.])\ntorch.float32\n","output_type":"stream"}]},{"cell_type":"code","source":"print(ft.short())\nprint(ft.long())\nprint(ft.int())","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:36.936832Z","iopub.execute_input":"2024-11-15T10:16:36.937270Z","iopub.status.idle":"2024-11-15T10:16:36.946259Z","shell.execute_reply.started":"2024-11-15T10:16:36.937227Z","shell.execute_reply":"2024-11-15T10:16:36.944814Z"},"trusted":true},"execution_count":194,"outputs":[{"name":"stdout","text":"tensor([1, 2, 3], dtype=torch.int16)\ntensor([1, 2, 3])\ntensor([1, 2, 3], dtype=torch.int32)\n","output_type":"stream"}]},{"cell_type":"code","source":"it = torch.IntTensor([1, 2, 3])\nprint(it)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:36.956164Z","iopub.execute_input":"2024-11-15T10:16:36.956621Z","iopub.status.idle":"2024-11-15T10:16:36.964036Z","shell.execute_reply.started":"2024-11-15T10:16:36.956557Z","shell.execute_reply":"2024-11-15T10:16:36.962827Z"},"trusted":true},"execution_count":195,"outputs":[{"name":"stdout","text":"tensor([1, 2, 3], dtype=torch.int32)\n","output_type":"stream"}]},{"cell_type":"code","source":" print(it.float())","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:36.975682Z","iopub.execute_input":"2024-11-15T10:16:36.976297Z","iopub.status.idle":"2024-11-15T10:16:36.983668Z","shell.execute_reply.started":"2024-11-15T10:16:36.976253Z","shell.execute_reply":"2024-11-15T10:16:36.982322Z"},"trusted":true},"execution_count":196,"outputs":[{"name":"stdout","text":"tensor([1., 2., 3.])\n","output_type":"stream"}]},{"cell_type":"code","source":"x = torch.randn(1)\nprint(x)\nprint(x.item())\nprint(x.dtype)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:36.994092Z","iopub.execute_input":"2024-11-15T10:16:36.994566Z","iopub.status.idle":"2024-11-15T10:16:37.005534Z","shell.execute_reply.started":"2024-11-15T10:16:36.994519Z","shell.execute_reply":"2024-11-15T10:16:37.004076Z"},"trusted":true},"execution_count":197,"outputs":[{"name":"stdout","text":"tensor([-0.4210])\n-0.4209649860858917\ntorch.float32\n","output_type":"stream"}]},{"cell_type":"code","source":"device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nprint(device)\ny = torch.ones_like(x, device=device)\nprint(y)\nx = x.to(device)\nprint(x)\nz = x + y\nprint(z)\nprint(z.to('cpu', torch.double))","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.014720Z","iopub.execute_input":"2024-11-15T10:16:37.015183Z","iopub.status.idle":"2024-11-15T10:16:37.026006Z","shell.execute_reply.started":"2024-11-15T10:16:37.015139Z","shell.execute_reply":"2024-11-15T10:16:37.024678Z"},"trusted":true},"execution_count":198,"outputs":[{"name":"stdout","text":"cpu\ntensor([1.])\ntensor([-0.4210])\ntensor([0.5790])\ntensor([0.5790], dtype=torch.float64)\n","output_type":"stream"}]},{"cell_type":"code","source":"t0 = torch.tensor(0)\nprint(t0.ndim)\nprint(t0.shape)\nprint(t0)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.051804Z","iopub.execute_input":"2024-11-15T10:16:37.052804Z","iopub.status.idle":"2024-11-15T10:16:37.061471Z","shell.execute_reply.started":"2024-11-15T10:16:37.052754Z","shell.execute_reply":"2024-11-15T10:16:37.059829Z"},"trusted":true},"execution_count":199,"outputs":[{"name":"stdout","text":"0\ntorch.Size([])\ntensor(0)\n","output_type":"stream"}]},{"cell_type":"code","source":"t1 = torch.tensor([1, 2, 3])\nprint(t1.ndim)\nprint(t1.shape)\nprint(t1)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.087789Z","iopub.execute_input":"2024-11-15T10:16:37.088214Z","iopub.status.idle":"2024-11-15T10:16:37.095764Z","shell.execute_reply.started":"2024-11-15T10:16:37.088177Z","shell.execute_reply":"2024-11-15T10:16:37.094300Z"},"trusted":true},"execution_count":200,"outputs":[{"name":"stdout","text":"1\ntorch.Size([3])\ntensor([1, 2, 3])\n","output_type":"stream"}]},{"cell_type":"code","source":"t2 = torch.tensor([[2, 4], [1, 3]])\nprint(t2.ndim)\nprint(t2.shape)\nprint(t2)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.124492Z","iopub.execute_input":"2024-11-15T10:16:37.124953Z","iopub.status.idle":"2024-11-15T10:16:37.133021Z","shell.execute_reply.started":"2024-11-15T10:16:37.124909Z","shell.execute_reply":"2024-11-15T10:16:37.131671Z"},"trusted":true},"execution_count":201,"outputs":[{"name":"stdout","text":"2\ntorch.Size([2, 2])\ntensor([[2, 4],\n        [1, 3]])\n","output_type":"stream"}]},{"cell_type":"code","source":"t3 = torch.tensor([[[2, 4], [1, 3]],[[2, 4], [1, 3]],[[2, 4], [1, 3]]])\nprint(t3.ndim)\nprint(t3.shape)\nprint(t3)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.154035Z","iopub.execute_input":"2024-11-15T10:16:37.154981Z","iopub.status.idle":"2024-11-15T10:16:37.162843Z","shell.execute_reply.started":"2024-11-15T10:16:37.154926Z","shell.execute_reply":"2024-11-15T10:16:37.161691Z"},"trusted":true},"execution_count":202,"outputs":[{"name":"stdout","text":"3\ntorch.Size([3, 2, 2])\ntensor([[[2, 4],\n         [1, 3]],\n\n        [[2, 4],\n         [1, 3]],\n\n        [[2, 4],\n         [1, 3]]])\n","output_type":"stream"}]},{"cell_type":"code","source":"import math","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.184766Z","iopub.execute_input":"2024-11-15T10:16:37.185250Z","iopub.status.idle":"2024-11-15T10:16:37.190621Z","shell.execute_reply.started":"2024-11-15T10:16:37.185208Z","shell.execute_reply":"2024-11-15T10:16:37.189077Z"},"trusted":true},"execution_count":203,"outputs":[]},{"cell_type":"code","source":"a = torch.rand(1, 2) * 2 - 1\nprint(a)\nprint(torch.abs(a))\nprint(torch.ceil(a))\nprint(torch.clamp(a, -0.5, 0.5))","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.226470Z","iopub.execute_input":"2024-11-15T10:16:37.227004Z","iopub.status.idle":"2024-11-15T10:16:37.237975Z","shell.execute_reply.started":"2024-11-15T10:16:37.226951Z","shell.execute_reply":"2024-11-15T10:16:37.236840Z"},"trusted":true},"execution_count":204,"outputs":[{"name":"stdout","text":"tensor([[-0.0736,  0.1308]])\ntensor([[0.0736, 0.1308]])\ntensor([[-0., 1.]])\ntensor([[-0.0736,  0.1308]])\n","output_type":"stream"}]},{"cell_type":"code","source":"print(a)\nprint(torch.min(a))\nprint(torch.prod(a))\nprint(torch.std(a))","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.248828Z","iopub.execute_input":"2024-11-15T10:16:37.249261Z","iopub.status.idle":"2024-11-15T10:16:37.259925Z","shell.execute_reply.started":"2024-11-15T10:16:37.249216Z","shell.execute_reply":"2024-11-15T10:16:37.258458Z"},"trusted":true},"execution_count":205,"outputs":[{"name":"stdout","text":"tensor([[-0.0736,  0.1308]])\ntensor(-0.0736)\ntensor(-0.0096)\ntensor(0.1445)\n","output_type":"stream"}]},{"cell_type":"code","source":"x = torch.randn(2, 2)\nprint(x)\nprint(x.max(dim=0))\nprint(x.max(dim=1))","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.266223Z","iopub.execute_input":"2024-11-15T10:16:37.266703Z","iopub.status.idle":"2024-11-15T10:16:37.280310Z","shell.execute_reply.started":"2024-11-15T10:16:37.266659Z","shell.execute_reply":"2024-11-15T10:16:37.278405Z"},"trusted":true},"execution_count":206,"outputs":[{"name":"stdout","text":"tensor([[-0.0407, -2.3203],\n        [ 1.3653,  0.0849]])\ntorch.return_types.max(\nvalues=tensor([1.3653, 0.0849]),\nindices=tensor([1, 1]))\ntorch.return_types.max(\nvalues=tensor([-0.0407,  1.3653]),\nindices=tensor([0, 0]))\n","output_type":"stream"}]},{"cell_type":"code","source":"x = torch.rand(2, 2)\nprint(x)\ny = torch.rand(2, 2)\nprint(y)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.282465Z","iopub.execute_input":"2024-11-15T10:16:37.283272Z","iopub.status.idle":"2024-11-15T10:16:37.293693Z","shell.execute_reply.started":"2024-11-15T10:16:37.283208Z","shell.execute_reply":"2024-11-15T10:16:37.292305Z"},"trusted":true},"execution_count":207,"outputs":[{"name":"stdout","text":"tensor([[0.1556, 0.4104],\n        [0.0939, 0.8179]])\ntensor([[0.7781, 0.3977],\n        [0.7554, 0.9503]])\n","output_type":"stream"}]},{"cell_type":"code","source":"print(torch.add(x, y))","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.295639Z","iopub.execute_input":"2024-11-15T10:16:37.296317Z","iopub.status.idle":"2024-11-15T10:16:37.307239Z","shell.execute_reply.started":"2024-11-15T10:16:37.296270Z","shell.execute_reply":"2024-11-15T10:16:37.305659Z"},"trusted":true},"execution_count":208,"outputs":[{"name":"stdout","text":"tensor([[0.9337, 0.8082],\n        [0.8492, 1.7683]])\n","output_type":"stream"}]},{"cell_type":"code","source":"result = torch.empty(2, 2)\ntorch.add(x, y, out=result)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.309391Z","iopub.execute_input":"2024-11-15T10:16:37.309827Z","iopub.status.idle":"2024-11-15T10:16:37.322196Z","shell.execute_reply.started":"2024-11-15T10:16:37.309787Z","shell.execute_reply":"2024-11-15T10:16:37.320460Z"},"trusted":true},"execution_count":209,"outputs":[{"execution_count":209,"output_type":"execute_result","data":{"text/plain":"tensor([[0.9337, 0.8082],\n        [0.8492, 1.7683]])"},"metadata":{}}]},{"cell_type":"code","source":"print(x)\nprint(y)\ny.add(x)\ny.add_(x)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.324371Z","iopub.execute_input":"2024-11-15T10:16:37.324813Z","iopub.status.idle":"2024-11-15T10:16:37.338483Z","shell.execute_reply.started":"2024-11-15T10:16:37.324770Z","shell.execute_reply":"2024-11-15T10:16:37.337051Z"},"trusted":true},"execution_count":210,"outputs":[{"name":"stdout","text":"tensor([[0.1556, 0.4104],\n        [0.0939, 0.8179]])\ntensor([[0.7781, 0.3977],\n        [0.7554, 0.9503]])\n","output_type":"stream"},{"execution_count":210,"output_type":"execute_result","data":{"text/plain":"tensor([[0.9337, 0.8082],\n        [0.8492, 1.7683]])"},"metadata":{}}]},{"cell_type":"code","source":"print(x)\nprint(y)\nprint(torch.mm(x, y))\nz = torch.mm(x, y)\nprint(z)\nprint(torch.svd(z))","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.340653Z","iopub.execute_input":"2024-11-15T10:16:37.341012Z","iopub.status.idle":"2024-11-15T10:16:37.354436Z","shell.execute_reply.started":"2024-11-15T10:16:37.340975Z","shell.execute_reply":"2024-11-15T10:16:37.353172Z"},"trusted":true},"execution_count":211,"outputs":[{"name":"stdout","text":"tensor([[0.1556, 0.4104],\n        [0.0939, 0.8179]])\ntensor([[0.9337, 0.8082],\n        [0.8492, 1.7683]])\ntensor([[0.4939, 0.8515],\n        [0.7823, 1.5222]])\ntensor([[0.4939, 0.8515],\n        [0.7823, 1.5222]])\ntorch.return_types.svd(\nU=tensor([[-0.4983, -0.8670],\n        [-0.8670,  0.4983]]),\nS=tensor([1.9739, 0.0434]),\nV=tensor([[-0.4683, -0.8836],\n        [-0.8836,  0.4683]]))\n","output_type":"stream"}]},{"cell_type":"code","source":"x = torch.randn(3, 3)\nprint(x)\n\nprint(x[0, 0])\nprint(x[0, 1])\nprint(x[1, 0])\nprint(x[1, 1])\n\nprint(x[:, 0])\nprint(x[:, 1])\nprint(x[0, :])","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.356815Z","iopub.execute_input":"2024-11-15T10:16:37.357262Z","iopub.status.idle":"2024-11-15T10:16:37.371616Z","shell.execute_reply.started":"2024-11-15T10:16:37.357218Z","shell.execute_reply":"2024-11-15T10:16:37.370338Z"},"trusted":true},"execution_count":212,"outputs":[{"name":"stdout","text":"tensor([[-1.0248, -0.7331,  0.6887],\n        [-1.3363,  0.0036, -0.2418],\n        [-0.0471, -0.8185, -0.3194]])\ntensor(-1.0248)\ntensor(-0.7331)\ntensor(-1.3363)\ntensor(0.0036)\ntensor([-1.0248, -1.3363, -0.0471])\ntensor([-0.7331,  0.0036, -0.8185])\ntensor([-1.0248, -0.7331,  0.6887])\n","output_type":"stream"}]},{"cell_type":"code","source":"x = torch.randn(4, 5)\nprint(x)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.373364Z","iopub.execute_input":"2024-11-15T10:16:37.373787Z","iopub.status.idle":"2024-11-15T10:16:37.381989Z","shell.execute_reply.started":"2024-11-15T10:16:37.373743Z","shell.execute_reply":"2024-11-15T10:16:37.380611Z"},"trusted":true},"execution_count":213,"outputs":[{"name":"stdout","text":"tensor([[ 2.8888, -0.7610, -0.1128, -0.7097, -0.4210],\n        [ 2.2604, -0.2742,  1.2566,  2.6798,  0.5224],\n        [ 0.4382, -0.5690,  0.8046, -0.3265,  0.0595],\n        [-1.3373, -0.5166,  0.3342, -0.3680,  0.4746]])\n","output_type":"stream"}]},{"cell_type":"code","source":"y = x.view(20)\nprint(y)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.384940Z","iopub.execute_input":"2024-11-15T10:16:37.385383Z","iopub.status.idle":"2024-11-15T10:16:37.398984Z","shell.execute_reply.started":"2024-11-15T10:16:37.385341Z","shell.execute_reply":"2024-11-15T10:16:37.397357Z"},"trusted":true},"execution_count":214,"outputs":[{"name":"stdout","text":"tensor([ 2.8888, -0.7610, -0.1128, -0.7097, -0.4210,  2.2604, -0.2742,  1.2566,\n         2.6798,  0.5224,  0.4382, -0.5690,  0.8046, -0.3265,  0.0595, -1.3373,\n        -0.5166,  0.3342, -0.3680,  0.4746])\n","output_type":"stream"}]},{"cell_type":"code","source":"z = x.view(5, -1)\nprint(z)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.400706Z","iopub.execute_input":"2024-11-15T10:16:37.401269Z","iopub.status.idle":"2024-11-15T10:16:37.413996Z","shell.execute_reply.started":"2024-11-15T10:16:37.401213Z","shell.execute_reply":"2024-11-15T10:16:37.412414Z"},"trusted":true},"execution_count":215,"outputs":[{"name":"stdout","text":"tensor([[ 2.8888, -0.7610, -0.1128, -0.7097],\n        [-0.4210,  2.2604, -0.2742,  1.2566],\n        [ 2.6798,  0.5224,  0.4382, -0.5690],\n        [ 0.8046, -0.3265,  0.0595, -1.3373],\n        [-0.5166,  0.3342, -0.3680,  0.4746]])\n","output_type":"stream"}]},{"cell_type":"code","source":"x = torch.randn(1)\nprint(x)\nprint(x.item())","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.416559Z","iopub.execute_input":"2024-11-15T10:16:37.417274Z","iopub.status.idle":"2024-11-15T10:16:37.426482Z","shell.execute_reply.started":"2024-11-15T10:16:37.417226Z","shell.execute_reply":"2024-11-15T10:16:37.425075Z"},"trusted":true},"execution_count":216,"outputs":[{"name":"stdout","text":"tensor([-0.5833])\n-0.5832884907722473\n","output_type":"stream"}]},{"cell_type":"code","source":"x = torch.randn(1)\nprint(x)\nprint(x.item())","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.427918Z","iopub.execute_input":"2024-11-15T10:16:37.428310Z","iopub.status.idle":"2024-11-15T10:16:37.441275Z","shell.execute_reply.started":"2024-11-15T10:16:37.428270Z","shell.execute_reply":"2024-11-15T10:16:37.439909Z"},"trusted":true},"execution_count":217,"outputs":[{"name":"stdout","text":"tensor([1.1504])\n1.1504089832305908\n","output_type":"stream"}]},{"cell_type":"code","source":"t = torch.rand(1, 3, 3)\nprint(t)\nprint(t.shape)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.443124Z","iopub.execute_input":"2024-11-15T10:16:37.443542Z","iopub.status.idle":"2024-11-15T10:16:37.458804Z","shell.execute_reply.started":"2024-11-15T10:16:37.443502Z","shell.execute_reply":"2024-11-15T10:16:37.457130Z"},"trusted":true},"execution_count":218,"outputs":[{"name":"stdout","text":"tensor([[[0.3684, 0.2735, 0.1416],\n         [0.3545, 0.2585, 0.0501],\n         [0.2031, 0.1647, 0.4068]]])\ntorch.Size([1, 3, 3])\n","output_type":"stream"}]},{"cell_type":"code","source":"t = t.squeeze()\nprint(t)\nprint(t.shape)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.461425Z","iopub.execute_input":"2024-11-15T10:16:37.461842Z","iopub.status.idle":"2024-11-15T10:16:37.474844Z","shell.execute_reply.started":"2024-11-15T10:16:37.461801Z","shell.execute_reply":"2024-11-15T10:16:37.473417Z"},"trusted":true},"execution_count":219,"outputs":[{"name":"stdout","text":"tensor([[0.3684, 0.2735, 0.1416],\n        [0.3545, 0.2585, 0.0501],\n        [0.2031, 0.1647, 0.4068]])\ntorch.Size([3, 3])\n","output_type":"stream"}]},{"cell_type":"code","source":"t = torch.rand(3, 3)\nprint(t)\n\nt = t.unsqueeze(dim=1)\nprint(t)\nprint(t.shape)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.476084Z","iopub.execute_input":"2024-11-15T10:16:37.476426Z","iopub.status.idle":"2024-11-15T10:16:37.488186Z","shell.execute_reply.started":"2024-11-15T10:16:37.476381Z","shell.execute_reply":"2024-11-15T10:16:37.487032Z"},"trusted":true},"execution_count":220,"outputs":[{"name":"stdout","text":"tensor([[0.0796, 0.4805, 0.8933],\n        [0.4892, 0.1365, 0.7676],\n        [0.1996, 0.0350, 0.4144]])\ntensor([[[0.0796, 0.4805, 0.8933]],\n\n        [[0.4892, 0.1365, 0.7676]],\n\n        [[0.1996, 0.0350, 0.4144]]])\ntorch.Size([3, 1, 3])\n","output_type":"stream"}]},{"cell_type":"code","source":"x = torch.FloatTensor([1, 4])\nprint(x)\ny = torch.FloatTensor([1, 4])\nprint(y)\nz = torch.FloatTensor([1, 4])\nprint(z)\n\nprint(torch.stack([x, y, z]))","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.489780Z","iopub.execute_input":"2024-11-15T10:16:37.490195Z","iopub.status.idle":"2024-11-15T10:16:37.504791Z","shell.execute_reply.started":"2024-11-15T10:16:37.490156Z","shell.execute_reply":"2024-11-15T10:16:37.503091Z"},"trusted":true},"execution_count":221,"outputs":[{"name":"stdout","text":"tensor([1., 4.])\ntensor([1., 4.])\ntensor([1., 4.])\ntensor([[1., 4.],\n        [1., 4.],\n        [1., 4.]])\n","output_type":"stream"}]},{"cell_type":"code","source":"a = torch.randn(1, 3, 3)\nprint(a)\nb = torch.randn(1, 3, 3)\nprint(b)\nc = torch.cat((a, b), dim=2)\nprint(c)\nprint(c.shape)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.506698Z","iopub.execute_input":"2024-11-15T10:16:37.507316Z","iopub.status.idle":"2024-11-15T10:16:37.518678Z","shell.execute_reply.started":"2024-11-15T10:16:37.507257Z","shell.execute_reply":"2024-11-15T10:16:37.517359Z"},"trusted":true},"execution_count":222,"outputs":[{"name":"stdout","text":"tensor([[[ 0.5286,  0.1871,  1.0734],\n         [ 0.3420,  1.9498, -1.2159],\n         [-1.5332, -0.5324, -0.6162]]])\ntensor([[[ 1.2197, -0.9421, -0.9742],\n         [ 0.9971,  0.8528,  0.9754],\n         [-1.7958, -0.6212, -0.0027]]])\ntensor([[[ 0.5286,  0.1871,  1.0734,  1.2197, -0.9421, -0.9742],\n         [ 0.3420,  1.9498, -1.2159,  0.9971,  0.8528,  0.9754],\n         [-1.5332, -0.5324, -0.6162, -1.7958, -0.6212, -0.0027]]])\ntorch.Size([1, 3, 6])\n","output_type":"stream"}]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"t = torch.rand(3, 6)\nprint(t)\n\nt1, t2, t3 = torch.chunk(t, 3, dim=1)\nprint(t1)\nprint(t2)\nprint(t3)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.521808Z","iopub.execute_input":"2024-11-15T10:16:37.522285Z","iopub.status.idle":"2024-11-15T10:16:37.533813Z","shell.execute_reply.started":"2024-11-15T10:16:37.522241Z","shell.execute_reply":"2024-11-15T10:16:37.531983Z"},"trusted":true},"execution_count":223,"outputs":[{"name":"stdout","text":"tensor([[0.0934, 0.0970, 0.4287, 0.8407, 0.6313, 0.5234],\n        [0.7987, 0.3883, 0.3866, 0.3694, 0.1418, 0.7244],\n        [0.3716, 0.6917, 0.5019, 0.1035, 0.5104, 0.6778]])\ntensor([[0.0934, 0.0970],\n        [0.7987, 0.3883],\n        [0.3716, 0.6917]])\ntensor([[0.4287, 0.8407],\n        [0.3866, 0.3694],\n        [0.5019, 0.1035]])\ntensor([[0.6313, 0.5234],\n        [0.1418, 0.7244],\n        [0.5104, 0.6778]])\n","output_type":"stream"}]},{"cell_type":"code","source":"a = torch.ones(7)\nprint(a)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.535779Z","iopub.execute_input":"2024-11-15T10:16:37.536287Z","iopub.status.idle":"2024-11-15T10:16:37.551671Z","shell.execute_reply.started":"2024-11-15T10:16:37.536229Z","shell.execute_reply":"2024-11-15T10:16:37.550012Z"},"trusted":true},"execution_count":224,"outputs":[{"name":"stdout","text":"tensor([1., 1., 1., 1., 1., 1., 1.])\n","output_type":"stream"}]},{"cell_type":"code","source":"b = a.numpy()\nprint(b)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.553371Z","iopub.execute_input":"2024-11-15T10:16:37.553815Z","iopub.status.idle":"2024-11-15T10:16:37.566036Z","shell.execute_reply.started":"2024-11-15T10:16:37.553773Z","shell.execute_reply":"2024-11-15T10:16:37.564716Z"},"trusted":true},"execution_count":225,"outputs":[{"name":"stdout","text":"[1. 1. 1. 1. 1. 1. 1.]\n","output_type":"stream"}]},{"cell_type":"code","source":"a.add_(1)\nprint(a)\nprint(b)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.567413Z","iopub.execute_input":"2024-11-15T10:16:37.567821Z","iopub.status.idle":"2024-11-15T10:16:37.583000Z","shell.execute_reply.started":"2024-11-15T10:16:37.567779Z","shell.execute_reply":"2024-11-15T10:16:37.581677Z"},"trusted":true},"execution_count":226,"outputs":[{"name":"stdout","text":"tensor([2., 2., 2., 2., 2., 2., 2.])\n[2. 2. 2. 2. 2. 2. 2.]\n","output_type":"stream"}]},{"cell_type":"code","source":"import numpy as np","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.584393Z","iopub.execute_input":"2024-11-15T10:16:37.584795Z","iopub.status.idle":"2024-11-15T10:16:37.597104Z","shell.execute_reply.started":"2024-11-15T10:16:37.584755Z","shell.execute_reply":"2024-11-15T10:16:37.595676Z"},"trusted":true},"execution_count":227,"outputs":[]},{"cell_type":"code","source":"a = np.ones(7)\nb = torch.from_numpy(a)\nnp.add(a, 1, out=a)\nprint(a)\nprint(b)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.599421Z","iopub.execute_input":"2024-11-15T10:16:37.599995Z","iopub.status.idle":"2024-11-15T10:16:37.616119Z","shell.execute_reply.started":"2024-11-15T10:16:37.599938Z","shell.execute_reply":"2024-11-15T10:16:37.614891Z"},"trusted":true},"execution_count":228,"outputs":[{"name":"stdout","text":"[2. 2. 2. 2. 2. 2. 2.]\ntensor([2., 2., 2., 2., 2., 2., 2.], dtype=torch.float64)\n","output_type":"stream"}]},{"cell_type":"code","source":"x = torch.ones(3, 3, requires_grad = True)\nprint(x)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.617745Z","iopub.execute_input":"2024-11-15T10:16:37.618168Z","iopub.status.idle":"2024-11-15T10:16:37.629976Z","shell.execute_reply.started":"2024-11-15T10:16:37.618125Z","shell.execute_reply":"2024-11-15T10:16:37.628384Z"},"trusted":true},"execution_count":229,"outputs":[{"name":"stdout","text":"tensor([[1., 1., 1.],\n        [1., 1., 1.],\n        [1., 1., 1.]], requires_grad=True)\n","output_type":"stream"}]},{"cell_type":"code","source":"y = x + 5\nprint(y)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.634446Z","iopub.execute_input":"2024-11-15T10:16:37.635059Z","iopub.status.idle":"2024-11-15T10:16:37.644500Z","shell.execute_reply.started":"2024-11-15T10:16:37.635007Z","shell.execute_reply":"2024-11-15T10:16:37.642989Z"},"trusted":true},"execution_count":230,"outputs":[{"name":"stdout","text":"tensor([[6., 6., 6.],\n        [6., 6., 6.],\n        [6., 6., 6.]], grad_fn=<AddBackward0>)\n","output_type":"stream"}]},{"cell_type":"code","source":"z = y * y\nout = z.mean()\nprint(z, out)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.646549Z","iopub.execute_input":"2024-11-15T10:16:37.647297Z","iopub.status.idle":"2024-11-15T10:16:37.660584Z","shell.execute_reply.started":"2024-11-15T10:16:37.647249Z","shell.execute_reply":"2024-11-15T10:16:37.659313Z"},"trusted":true},"execution_count":231,"outputs":[{"name":"stdout","text":"tensor([[36., 36., 36.],\n        [36., 36., 36.],\n        [36., 36., 36.]], grad_fn=<MulBackward0>) tensor(36., grad_fn=<MeanBackward0>)\n","output_type":"stream"}]},{"cell_type":"code","source":"print(out)\nout.backward()","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.662899Z","iopub.execute_input":"2024-11-15T10:16:37.663729Z","iopub.status.idle":"2024-11-15T10:16:37.673246Z","shell.execute_reply.started":"2024-11-15T10:16:37.663661Z","shell.execute_reply":"2024-11-15T10:16:37.671863Z"},"trusted":true},"execution_count":232,"outputs":[{"name":"stdout","text":"tensor(36., grad_fn=<MeanBackward0>)\n","output_type":"stream"}]},{"cell_type":"code","source":"print(x)\nprint(x.grad)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.674716Z","iopub.execute_input":"2024-11-15T10:16:37.675115Z","iopub.status.idle":"2024-11-15T10:16:37.689320Z","shell.execute_reply.started":"2024-11-15T10:16:37.675066Z","shell.execute_reply":"2024-11-15T10:16:37.687904Z"},"trusted":true},"execution_count":233,"outputs":[{"name":"stdout","text":"tensor([[1., 1., 1.],\n        [1., 1., 1.],\n        [1., 1., 1.]], requires_grad=True)\ntensor([[1.3333, 1.3333, 1.3333],\n        [1.3333, 1.3333, 1.3333],\n        [1.3333, 1.3333, 1.3333]])\n","output_type":"stream"}]},{"cell_type":"code","source":"x = torch.randn(3, requires_grad=True)\n\ny = x * 2\nwhile y.data.norm() < 1000:\n    y = y * 2\n    \nprint(y)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.691223Z","iopub.execute_input":"2024-11-15T10:16:37.691619Z","iopub.status.idle":"2024-11-15T10:16:37.701717Z","shell.execute_reply.started":"2024-11-15T10:16:37.691561Z","shell.execute_reply":"2024-11-15T10:16:37.700268Z"},"trusted":true},"execution_count":234,"outputs":[{"name":"stdout","text":"tensor([-1004.2233,   959.6252,  -410.7978], grad_fn=<MulBackward0>)\n","output_type":"stream"}]},{"cell_type":"code","source":"v = torch.tensor([0.1, 1.0, 0.0001], dtype=torch.float)\ny.backward(v)\n\nprint(x.grad)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.703241Z","iopub.execute_input":"2024-11-15T10:16:37.703701Z","iopub.status.idle":"2024-11-15T10:16:37.716230Z","shell.execute_reply.started":"2024-11-15T10:16:37.703578Z","shell.execute_reply":"2024-11-15T10:16:37.714991Z"},"trusted":true},"execution_count":235,"outputs":[{"name":"stdout","text":"tensor([2.0480e+02, 2.0480e+03, 2.0480e-01])\n","output_type":"stream"}]},{"cell_type":"code","source":"print(x.requires_grad)\nprint((x**2).requires_grad)\n\nwith torch.no_grad():\n    print((x**2).requires_grad)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.717736Z","iopub.execute_input":"2024-11-15T10:16:37.718269Z","iopub.status.idle":"2024-11-15T10:16:37.730338Z","shell.execute_reply.started":"2024-11-15T10:16:37.718223Z","shell.execute_reply":"2024-11-15T10:16:37.729031Z"},"trusted":true},"execution_count":236,"outputs":[{"name":"stdout","text":"True\nTrue\nFalse\n","output_type":"stream"}]},{"cell_type":"code","source":"print(x.requires_grad)\ny = x.detach()\nprint(y.requires_grad)\nprint(x.eq(y).all())","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.732237Z","iopub.execute_input":"2024-11-15T10:16:37.732666Z","iopub.status.idle":"2024-11-15T10:16:37.744428Z","shell.execute_reply.started":"2024-11-15T10:16:37.732620Z","shell.execute_reply":"2024-11-15T10:16:37.743259Z"},"trusted":true},"execution_count":237,"outputs":[{"name":"stdout","text":"True\nFalse\ntensor(True)\n","output_type":"stream"}]},{"cell_type":"code","source":"a = torch.ones(2, 2)\nprint(a)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.746106Z","iopub.execute_input":"2024-11-15T10:16:37.746503Z","iopub.status.idle":"2024-11-15T10:16:37.758508Z","shell.execute_reply.started":"2024-11-15T10:16:37.746464Z","shell.execute_reply":"2024-11-15T10:16:37.757329Z"},"trusted":true},"execution_count":238,"outputs":[{"name":"stdout","text":"tensor([[1., 1.],\n        [1., 1.]])\n","output_type":"stream"}]},{"cell_type":"code","source":"a = torch.ones(2, 2, requires_grad=True)\nprint(a)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.760211Z","iopub.execute_input":"2024-11-15T10:16:37.761190Z","iopub.status.idle":"2024-11-15T10:16:37.771014Z","shell.execute_reply.started":"2024-11-15T10:16:37.761135Z","shell.execute_reply":"2024-11-15T10:16:37.769385Z"},"trusted":true},"execution_count":239,"outputs":[{"name":"stdout","text":"tensor([[1., 1.],\n        [1., 1.]], requires_grad=True)\n","output_type":"stream"}]},{"cell_type":"code","source":"print(a.data)\nprint(a.grad)\nprint(a.grad_fn)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.772714Z","iopub.execute_input":"2024-11-15T10:16:37.773331Z","iopub.status.idle":"2024-11-15T10:16:37.786426Z","shell.execute_reply.started":"2024-11-15T10:16:37.773273Z","shell.execute_reply":"2024-11-15T10:16:37.785108Z"},"trusted":true},"execution_count":240,"outputs":[{"name":"stdout","text":"tensor([[1., 1.],\n        [1., 1.]])\nNone\nNone\n","output_type":"stream"}]},{"cell_type":"code","source":"b = a + 2\nprint(b)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.788447Z","iopub.execute_input":"2024-11-15T10:16:37.788958Z","iopub.status.idle":"2024-11-15T10:16:37.800337Z","shell.execute_reply.started":"2024-11-15T10:16:37.788905Z","shell.execute_reply":"2024-11-15T10:16:37.798960Z"},"trusted":true},"execution_count":241,"outputs":[{"name":"stdout","text":"tensor([[3., 3.],\n        [3., 3.]], grad_fn=<AddBackward0>)\n","output_type":"stream"}]},{"cell_type":"code","source":"c = b ** 2\nprint(c)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.802146Z","iopub.execute_input":"2024-11-15T10:16:37.802678Z","iopub.status.idle":"2024-11-15T10:16:37.814832Z","shell.execute_reply.started":"2024-11-15T10:16:37.802619Z","shell.execute_reply":"2024-11-15T10:16:37.813333Z"},"trusted":true},"execution_count":242,"outputs":[{"name":"stdout","text":"tensor([[9., 9.],\n        [9., 9.]], grad_fn=<PowBackward0>)\n","output_type":"stream"}]},{"cell_type":"raw","source":"out = c.sum()\nprint(out)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T09:22:28.110796Z","iopub.execute_input":"2024-11-15T09:22:28.111367Z","iopub.status.idle":"2024-11-15T09:22:28.120240Z","shell.execute_reply.started":"2024-11-15T09:22:28.111322Z","shell.execute_reply":"2024-11-15T09:22:28.118978Z"}}},{"cell_type":"code","source":"print(out)\nout.backward()","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:37.816394Z","iopub.execute_input":"2024-11-15T10:16:37.816822Z","iopub.status.idle":"2024-11-15T10:16:37.885932Z","shell.execute_reply.started":"2024-11-15T10:16:37.816781Z","shell.execute_reply":"2024-11-15T10:16:37.884021Z"},"trusted":true},"execution_count":243,"outputs":[{"name":"stdout","text":"tensor(36., grad_fn=<MeanBackward0>)\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","Cell \u001b[0;32mIn[243], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28mprint\u001b[39m(out)\n\u001b[0;32m----> 2\u001b[0m \u001b[43mout\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbackward\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/_tensor.py:521\u001b[0m, in \u001b[0;36mTensor.backward\u001b[0;34m(self, gradient, retain_graph, create_graph, inputs)\u001b[0m\n\u001b[1;32m    511\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m has_torch_function_unary(\u001b[38;5;28mself\u001b[39m):\n\u001b[1;32m    512\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m handle_torch_function(\n\u001b[1;32m    513\u001b[0m         Tensor\u001b[38;5;241m.\u001b[39mbackward,\n\u001b[1;32m    514\u001b[0m         (\u001b[38;5;28mself\u001b[39m,),\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    519\u001b[0m         inputs\u001b[38;5;241m=\u001b[39minputs,\n\u001b[1;32m    520\u001b[0m     )\n\u001b[0;32m--> 521\u001b[0m \u001b[43mtorch\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mautograd\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbackward\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    522\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgradient\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mretain_graph\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcreate_graph\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43minputs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minputs\u001b[49m\n\u001b[1;32m    523\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/autograd/__init__.py:289\u001b[0m, in \u001b[0;36mbackward\u001b[0;34m(tensors, grad_tensors, retain_graph, create_graph, grad_variables, inputs)\u001b[0m\n\u001b[1;32m    284\u001b[0m     retain_graph \u001b[38;5;241m=\u001b[39m create_graph\n\u001b[1;32m    286\u001b[0m \u001b[38;5;66;03m# The reason we repeat the same comment below is that\u001b[39;00m\n\u001b[1;32m    287\u001b[0m \u001b[38;5;66;03m# some Python versions print out the first line of a multi-line function\u001b[39;00m\n\u001b[1;32m    288\u001b[0m \u001b[38;5;66;03m# calls in the traceback and some print out the last line\u001b[39;00m\n\u001b[0;32m--> 289\u001b[0m \u001b[43m_engine_run_backward\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    290\u001b[0m \u001b[43m    \u001b[49m\u001b[43mtensors\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    291\u001b[0m \u001b[43m    \u001b[49m\u001b[43mgrad_tensors_\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    292\u001b[0m \u001b[43m    \u001b[49m\u001b[43mretain_graph\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    293\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcreate_graph\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    294\u001b[0m \u001b[43m    \u001b[49m\u001b[43minputs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    295\u001b[0m \u001b[43m    \u001b[49m\u001b[43mallow_unreachable\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m    296\u001b[0m \u001b[43m    \u001b[49m\u001b[43maccumulate_grad\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m    297\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/autograd/graph.py:768\u001b[0m, in \u001b[0;36m_engine_run_backward\u001b[0;34m(t_outputs, *args, **kwargs)\u001b[0m\n\u001b[1;32m    766\u001b[0m     unregister_hooks \u001b[38;5;241m=\u001b[39m _register_logging_hooks_on_whole_graph(t_outputs)\n\u001b[1;32m    767\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 768\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mVariable\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_execution_engine\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrun_backward\u001b[49m\u001b[43m(\u001b[49m\u001b[43m  \u001b[49m\u001b[38;5;66;43;03m# Calls into the C++ engine to run the backward pass\u001b[39;49;00m\n\u001b[1;32m    769\u001b[0m \u001b[43m        \u001b[49m\u001b[43mt_outputs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\n\u001b[1;32m    770\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m  \u001b[38;5;66;03m# Calls into the C++ engine to run the backward pass\u001b[39;00m\n\u001b[1;32m    771\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[1;32m    772\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m attach_logging_hooks:\n","\u001b[0;31mRuntimeError\u001b[0m: Trying to backward through the graph a second time (or directly access saved tensors after they have already been freed). Saved intermediate values of the graph are freed when you call .backward() or autograd.grad(). Specify retain_graph=True if you need to backward through the graph a second time or if you need to access saved tensors after calling backward."],"ename":"RuntimeError","evalue":"Trying to backward through the graph a second time (or directly access saved tensors after they have already been freed). Saved intermediate values of the graph are freed when you call .backward() or autograd.grad(). Specify retain_graph=True if you need to backward through the graph a second time or if you need to access saved tensors after calling backward.","output_type":"error"}]},{"cell_type":"code","source":"print(a.data)\nprint(a.grad)\nprint(a.grad_fn)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:49.078942Z","iopub.execute_input":"2024-11-15T10:16:49.079389Z","iopub.status.idle":"2024-11-15T10:16:49.087501Z","shell.execute_reply.started":"2024-11-15T10:16:49.079350Z","shell.execute_reply":"2024-11-15T10:16:49.086361Z"},"trusted":true},"execution_count":244,"outputs":[{"name":"stdout","text":"tensor([[1., 1.],\n        [1., 1.]])\nNone\nNone\n","output_type":"stream"}]},{"cell_type":"code","source":"print(b.data)\nprint(b.grad)\nprint(b.grad_fn)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:49.555955Z","iopub.execute_input":"2024-11-15T10:16:49.556444Z","iopub.status.idle":"2024-11-15T10:16:49.566180Z","shell.execute_reply.started":"2024-11-15T10:16:49.556401Z","shell.execute_reply":"2024-11-15T10:16:49.564819Z"},"trusted":true},"execution_count":245,"outputs":[{"name":"stdout","text":"tensor([[3., 3.],\n        [3., 3.]])\nNone\n<AddBackward0 object at 0x7f0a222e1a50>\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_30/2485455394.py:2: UserWarning: The .grad attribute of a Tensor that is not a leaf Tensor is being accessed. Its .grad attribute won't be populated during autograd.backward(). If you indeed want the .grad field to be populated for a non-leaf Tensor, use .retain_grad() on the non-leaf Tensor. If you access the non-leaf Tensor by mistake, make sure you access the leaf Tensor instead. See github.com/pytorch/pytorch/pull/30531 for more informations. (Triggered internally at aten/src/ATen/core/TensorBody.h:489.)\n  print(b.grad)\n","output_type":"stream"}]},{"cell_type":"code","source":"print(c.data)\nprint(c.grad)\nprint(c.grad_fn)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:50.420794Z","iopub.execute_input":"2024-11-15T10:16:50.421289Z","iopub.status.idle":"2024-11-15T10:16:50.429637Z","shell.execute_reply.started":"2024-11-15T10:16:50.421241Z","shell.execute_reply":"2024-11-15T10:16:50.428059Z"},"trusted":true},"execution_count":246,"outputs":[{"name":"stdout","text":"tensor([[9., 9.],\n        [9., 9.]])\nNone\n<PowBackward0 object at 0x7f0a222e1e70>\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_30/3875808255.py:2: UserWarning: The .grad attribute of a Tensor that is not a leaf Tensor is being accessed. Its .grad attribute won't be populated during autograd.backward(). If you indeed want the .grad field to be populated for a non-leaf Tensor, use .retain_grad() on the non-leaf Tensor. If you access the non-leaf Tensor by mistake, make sure you access the leaf Tensor instead. See github.com/pytorch/pytorch/pull/30531 for more informations. (Triggered internally at aten/src/ATen/core/TensorBody.h:489.)\n  print(c.grad)\n","output_type":"stream"}]},{"cell_type":"code","source":"print(out.data)\nprint(out.grad)\nprint(out.grad_fn)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:16:50.935443Z","iopub.execute_input":"2024-11-15T10:16:50.935911Z","iopub.status.idle":"2024-11-15T10:16:50.945872Z","shell.execute_reply.started":"2024-11-15T10:16:50.935867Z","shell.execute_reply":"2024-11-15T10:16:50.944421Z"},"trusted":true},"execution_count":247,"outputs":[{"name":"stdout","text":"tensor(36.)\nNone\n<MeanBackward0 object at 0x7f0a222e1a80>\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_30/578081240.py:2: UserWarning: The .grad attribute of a Tensor that is not a leaf Tensor is being accessed. Its .grad attribute won't be populated during autograd.backward(). If you indeed want the .grad field to be populated for a non-leaf Tensor, use .retain_grad() on the non-leaf Tensor. If you access the non-leaf Tensor by mistake, make sure you access the leaf Tensor instead. See github.com/pytorch/pytorch/pull/30531 for more informations. (Triggered internally at aten/src/ATen/core/TensorBody.h:489.)\n  print(out.grad)\n","output_type":"stream"}]},{"cell_type":"code","source":"!pip install torchviz","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-11-15T10:16:51.692362Z","iopub.execute_input":"2024-11-15T10:16:51.692808Z","iopub.status.idle":"2024-11-15T10:17:04.859171Z","shell.execute_reply.started":"2024-11-15T10:16:51.692764Z","shell.execute_reply":"2024-11-15T10:17:04.857041Z"},"trusted":true},"execution_count":248,"outputs":[{"name":"stdout","text":"Requirement already satisfied: torchviz in /opt/conda/lib/python3.10/site-packages (0.0.2)\nRequirement already satisfied: torch in /opt/conda/lib/python3.10/site-packages (from torchviz) (2.4.0+cpu)\nRequirement already satisfied: graphviz in /opt/conda/lib/python3.10/site-packages (from torchviz) (0.20.3)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from torch->torchviz) (3.15.1)\nRequirement already satisfied: typing-extensions>=4.8.0 in /opt/conda/lib/python3.10/site-packages (from torch->torchviz) (4.12.2)\nRequirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch->torchviz) (1.12)\nRequirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch->torchviz) (3.3)\nRequirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch->torchviz) (3.1.4)\nRequirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torch->torchviz) (2024.6.1)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch->torchviz) (2.1.5)\nRequirement already satisfied: mpmath>=0.19 in /opt/conda/lib/python3.10/site-packages (from sympy->torch->torchviz) (1.3.0)\n","output_type":"stream"}]},{"cell_type":"code","source":"import torch\nfrom torchviz import make_dot\n\n# 1. 초기 텐서\na = torch.ones(2, 2, requires_grad=True)\n\n# 2. 계산 그래프 생성\nb = a + 2\nc = b ** 2\nout = c.sum()\n\n# 3. 시각화\ngraph = make_dot(out, params={\"a\": a})\ngraph.render(\"computation_graph\", format=\"png\")  # 그래프를 PNG 파일로 저장\n","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:17:04.862209Z","iopub.execute_input":"2024-11-15T10:17:04.862673Z","iopub.status.idle":"2024-11-15T10:17:04.914091Z","shell.execute_reply.started":"2024-11-15T10:17:04.862625Z","shell.execute_reply":"2024-11-15T10:17:04.912233Z"},"trusted":true},"execution_count":249,"outputs":[{"execution_count":249,"output_type":"execute_result","data":{"text/plain":"'computation_graph.png'"},"metadata":{}}]},{"cell_type":"code","source":"from torch.utils.data import Dataset, DataLoader\n\nimport torchvision.transforms as transforms\nfrom torchvision import datasets","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:17:04.916423Z","iopub.execute_input":"2024-11-15T10:17:04.918073Z","iopub.status.idle":"2024-11-15T10:17:04.926673Z","shell.execute_reply.started":"2024-11-15T10:17:04.918017Z","shell.execute_reply":"2024-11-15T10:17:04.924024Z"},"trusted":true},"execution_count":250,"outputs":[]},{"cell_type":"code","source":"mnist_transform = transforms.Compose([transforms.ToTensor(),\n                                     transforms.Normalize(mean=(0.5), std=(1.0))])","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:17:04.929772Z","iopub.execute_input":"2024-11-15T10:17:04.930267Z","iopub.status.idle":"2024-11-15T10:17:04.947465Z","shell.execute_reply.started":"2024-11-15T10:17:04.930220Z","shell.execute_reply":"2024-11-15T10:17:04.946181Z"},"trusted":true},"execution_count":251,"outputs":[]},{"cell_type":"code","source":"trainset = datasets.MNIST(root='/kaggle/working/mnist-dataset/', \n                          train=True, \n                          download=True,\n                          transform=mnist_transform)\n\ntestset = datasets.MNIST(root='/kaggle/working/mnist-dataset/', \n                         train=False, \n                         download=True,\n                         transform=mnist_transform)","metadata":{"execution":{"iopub.status.busy":"2024-11-15T10:17:51.044936Z","iopub.execute_input":"2024-11-15T10:17:51.045418Z","iopub.status.idle":"2024-11-15T10:17:57.876630Z","shell.execute_reply.started":"2024-11-15T10:17:51.045372Z","shell.execute_reply":"2024-11-15T10:17:57.875200Z"},"trusted":true},"execution_count":254,"outputs":[{"name":"stdout","text":"Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz\nFailed to download (trying next):\nHTTP Error 403: Forbidden\n\nDownloading https://ossci-datasets.s3.amazonaws.com/mnist/train-images-idx3-ubyte.gz\nDownloading https://ossci-datasets.s3.amazonaws.com/mnist/train-images-idx3-ubyte.gz to /kaggle/working/mnist-dataset/MNIST/raw/train-images-idx3-ubyte.gz\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 9912422/9912422 [00:00<00:00, 12671368.76it/s]\n","output_type":"stream"},{"name":"stdout","text":"Extracting /kaggle/working/mnist-dataset/MNIST/raw/train-images-idx3-ubyte.gz to /kaggle/working/mnist-dataset/MNIST/raw\n\nDownloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz\nFailed to download (trying next):\nHTTP Error 403: Forbidden\n\nDownloading https://ossci-datasets.s3.amazonaws.com/mnist/train-labels-idx1-ubyte.gz\nDownloading https://ossci-datasets.s3.amazonaws.com/mnist/train-labels-idx1-ubyte.gz to /kaggle/working/mnist-dataset/MNIST/raw/train-labels-idx1-ubyte.gz\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 28881/28881 [00:00<00:00, 341090.87it/s]\n","output_type":"stream"},{"name":"stdout","text":"Extracting /kaggle/working/mnist-dataset/MNIST/raw/train-labels-idx1-ubyte.gz to /kaggle/working/mnist-dataset/MNIST/raw\n\nDownloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz\nFailed to download (trying next):\nHTTP Error 403: Forbidden\n\nDownloading https://ossci-datasets.s3.amazonaws.com/mnist/t10k-images-idx3-ubyte.gz\nDownloading https://ossci-datasets.s3.amazonaws.com/mnist/t10k-images-idx3-ubyte.gz to /kaggle/working/mnist-dataset/MNIST/raw/t10k-images-idx3-ubyte.gz\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 1648877/1648877 [00:00<00:00, 3170674.65it/s]\n","output_type":"stream"},{"name":"stdout","text":"Extracting /kaggle/working/mnist-dataset/MNIST/raw/t10k-images-idx3-ubyte.gz to /kaggle/working/mnist-dataset/MNIST/raw\n\nDownloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz\nFailed to download (trying next):\nHTTP Error 403: Forbidden\n\nDownloading https://ossci-datasets.s3.amazonaws.com/mnist/t10k-labels-idx1-ubyte.gz\nDownloading https://ossci-datasets.s3.amazonaws.com/mnist/t10k-labels-idx1-ubyte.gz to /kaggle/working/mnist-dataset/MNIST/raw/t10k-labels-idx1-ubyte.gz\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 4542/4542 [00:00<00:00, 1754353.88it/s]","output_type":"stream"},{"name":"stdout","text":"Extracting /kaggle/working/mnist-dataset/MNIST/raw/t10k-labels-idx1-ubyte.gz to /kaggle/working/mnist-dataset/MNIST/raw\n\n","output_type":"stream"},{"name":"stderr","text":"\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}